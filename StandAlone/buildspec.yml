version: 0.2

phases:
  install:
    commands:
      # Instala o Terraform em um diretório local e o adiciona ao PATH do ambiente
      - echo "Instalando Terraform v${TERRAFORM_VERSION}..."
      - wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_arm64.zip
      - unzip -q terraform_${TERRAFORM_VERSION}_linux_arm64.zip
      - mkdir -p bin
      - mv terraform bin/
      - export PATH="$CODEBUILD_SRC_DIR/bin:$PATH"
      - terraform --version
      - echo "Instalação do Terraform concluída."

  pre_build:
    commands:
      # Define variáveis de ambiente para o backend do Terraform
      - export TF_STATE_BUCKET=${AWS_S3_BUCKET_TARGET_NAME_0}
      - export TF_LOCK_TABLE=${AWS_DYNAMODB_TABLE_TARGET_NAME_0}

      # Muda o diretório de trabalho para onde os arquivos do Terraform ficarão
      - echo "Mudando para o diretório de trabalho"
      - cd ${CODEBUILD_SRC_DIR}/StandAlone

      # --- Bloco de Processamento Genérico de Fontes Secundárias ---
      - echo "Procurando e processando fontes secundárias..."
      # Verifica se a variável com a lista de identificadores foi passada pela Lambda
      - |
        if [ -n "$SECONDARY_SOURCE_IDENTIFIERS" ]; then
          echo "Identificadores de fontes secundárias encontrados: '${SECONDARY_SOURCE_IDENTIFIERS}'"
          # Faz um loop para cada identificador na string (separados por espaço)
          for identifier in $SECONDARY_SOURCE_IDENTIFIERS; do
            # Constrói dinamicamente o caminho para o diretório da fonte secundária
            SOURCE_PATH="$CODEBUILD_SRC_DIR_$identifier"
            
            echo "Processando fonte '$identifier' de '$SOURCE_PATH'..."
            
            # Verifica se o diretório da fonte realmente existe antes de tentar copiar
            if [ -d "$SOURCE_PATH" ]; then
              echo "Copiando conteúdo de '$SOURCE_PATH' para o diretório de trabalho atual..."
              # Copia todo o conteúdo, incluindo arquivos ocultos, para o diretório de trabalho
              # A opção -a (archive) é robusta, pois preserva permissões e copia recursivamente
              cp -a ${SOURCE_PATH}/. .
            else
              echo "AVISO: Diretório da fonte ${SOURCE_PATH} não encontrado. Pulando."
            fi
          done
        else
          echo "Nenhuma fonte secundária para processar."
        fi
      - echo "Processamento de fontes secundárias concluído."
      # --- Fim do Bloco de Processamento ---

      # Baixa o arquivo de configuração principal do Terraform do S3
      - echo "Baixando configuração principal de s3://${TF_STATE_BUCKET}/states/${STATE_NAME}/main.tf"
      - aws s3 cp "s3://${TF_STATE_BUCKET}/states/${STATE_NAME}/main.tf" .
      - echo "Download concluído."

      # Inicializa o Terraform no diretório de trabalho, agora com todos os arquivos necessários
      - echo "Inicializando o Terraform..."
      - |
        terraform init -reconfigure -no-color \
          -backend-config="bucket=${TF_STATE_BUCKET}" \
          -backend-config="key=states/${STATE_NAME}/terraform.tfstate" \
          -backend-config="region=${REGION}" \
          -backend-config="dynamodb_table=${TF_LOCK_TABLE}"

  build:
    commands:
      # Executa o comando Terraform (plan, apply, ou destroy) passado pela variável de ambiente COMMAND
      - |
        set -e
        echo "Executando terraform ${COMMAND}..."
        if [ "${COMMAND}" = "plan" ]; then
          terraform plan -no-color
        elif [ "${COMMAND}" = "apply" ]; then
          terraform apply -auto-approve -no-color
        elif [ "${COMMAND}" = "destroy" ]; then
          terraform destroy -auto-approve -no-color
        else
          echo "ERRO: Comando desconhecido"
          exit 1
        fi

  post_build:
    commands:
      - echo "Processo do CodeBuild finalizado."
